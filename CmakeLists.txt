cmake_minimum_required(VERSION 3.24)
project(SoLoud)
set(CMAKE_CXX_STANDARD 14)

set(PLATFORM "Unkown")

if(NOT DEFINED sdl_root)
    set(sdl_root "libraries/sdl")
endif ()
if(NOT DEFINED sdl2_root)
    set(sdl2_root "libraries/sdl2")
endif ()
if(NOT DEFINED dxsdk_root)
    if(DEFINED $ENV{DXSDK_DIR})
        set(dxsdk_root $ENV{DXSDK_DIR})
    else ()
        message("DXSDK environment variable not detected, assuming default install directory")
        set(dxsdk_root "C:/Program Files (x86)/Microsoft DirectX SDK (June 2010)")
    endif ()
endif ()
if(NOT DEFINED portaudio_root)
    set(portaudio_root "soloud/libraries/portaudio")
endif ()
if(NOT DEFINED openal_root)
    set(openal_root "soloud/libraries/openal")
endif ()

set(sdl_include ${sdl_root}"/include")
set(sdl2_include ${sdl2_root}"/include")
set(sdl2_lib_x86 ${sdl_root}"/lib/x86")
set(sdl2_lib_x64 ${sdl_root}"/lib/x64")
set(dxsdk_include ${dxsdk_root}"/include")
set(portaudio_include ${portaudio_root}"/include")
set(openal_include ${openal_root}"/include")



set(WITH_SDL FALSE)
set(WITH_SDL2 FALSE)
set(WITH_SDL_STATIC FALSE)
set(WITH_SDL2_STATIC FALSE)
set(WITH_PORTAUDIO FALSE)
set(WITH_OPENAL FALSE)
set(WITH_XAUDIO2 FALSE)
set(WITH_WINMM FALSE)
set(WITH_WASAPI FALSE)
set(WITH_ALSA FALSE)
set(WITH_JACK FALSE)
set(WITH_OSS FALSE)
set(WITH_COREAUDIO FALSE)
set(WITH_VITA_HOMEBREW FALSE)
set(WITH_NOSOUND FALSE)
set(WITH_MINIAUDIO FALSE)
set(WITH_NULL TRUE)
set(WITH_TOOLS FALSE)

if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows" OR ${CMAKE_SYSTEM_NAME} STREQUAL "MSYS")
    set(WITH_WINMM TRUE)
    set(PLATFORM "Windows")

    #Hack that forces the library to compile for windows, as the preprocessor definitons only check for MSVC.
    if (MINGW)
        add_compile_definitions(WINDOWS_VERSION)
    endif ()
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
    set(WITH_COREAUDIO TRUE)
    set(PLATFORM "MacOS")
else()
    set(WITH_ALSA)
    set(WITH_OSS)
    set(PLATFORM "Linux/Unix")
endif ()


option(with-common-backends "Includes common backends in build" OFF)
option(with-openal "Include OpenAL backend in build" OFF)
option(with-sdl "Include SDL backend in build" OFF)
option(with-sdl2 "Include SDL2 backend in build" OFF)
option(with-portaudio "Include PortAudio backend in build" OFF)
option(with-wasapi "Include WASAPI backend in build" OFF)
option(with-xaudio2 "Include XAudio2 backend in build" OFF)
option(with-native-only "Only native backends (winmm/oss) in build (default)" OFF)
option(with-sdl-only "Only include sdl in build" OFF)
option(with-sdlstatic-only "Only include sdl that doesn't use dyndll in build" OFF)
option(with-sdl2-only "Only include sdl2 in build" OFF)
option(with-sdl2static-only "Only include sdl2 that doesn't use dyndll in build" OFF)
option(with-coreaudio "Include OS X CoreAudio backend in build" OFF)
option(with-vita-homebrew-only "Only include PS Vita homebrew backend in build" OFF)
option(with-tools "Only include PS Vita homebrew backend in build" OFF)
option(soloud-devel "Shorthand for options used while developing SoLoud" OFF)
option(with-nosound "Include nosound backend in build" OFF)
option(with-jack "Include JACK backend in build" OFF)
option(with-jack-only "Only include JACK backend in build" OFF)
option(with-miniaudio "Include MiniAudio in build" OFF)
option(with-miniaudio-only "Only include MiniAudio in build" OFF)

option(build_examples "Whether to just build the library or the examples and the library" FALSE)

if(${soloud-devel})
    set(WITH_SDL FALSE)
    set(WITH_SDL2 TRUE)
    set(WITH_SDL_STATIC FALSE)
    set(WITH_SDL2_STATIC FALSE)
    set(WITH_PORTAUDIO TRUE)
    set(WITH_OPENAL TRUE)
    set(WITH_XAUDIO2 FALSE)
    set(WITH_WINMM FALSE)
    set(WITH_WASAPI FALSE)
    set(WITH_MINIAUDIO TRUE)
    set(WITH_OSS TRUE)
    set( WITH_NOSOUND TRUE)
    if(${PLATFORM} STREQUAL "Windows")
        set(WITH_XAUDIO2 FALSE)
        set(WITH_WINMM TRUE)
        set(WITH_WASAPI TRUE)
        set(WITH_OSS FALSE)
    endif()
    set(WITH_TOOLS TRUE)
endif ()

if(${with-common-backends})
    set(WITH_SDL FALSE)
    set(WITH_SDL_STATIC FALSE)
    set(WITH_SDL2_STATIC FALSE)
    set(WITH_PORTAUDIO TRUE)
    set(WITH_OPENAL TRUE)
    set(WITH_XAUDIO2 FALSE)
    set(WITH_WINMM FALSE)
    set(WITH_WASAPI FALSE)
    set(WITH_OSS TRUE)
    set(WITH_NOSOUND TRUE)
    set(WITH_MINIAUDIO FALSE)

    if(${PLATFORM} STREQUAL "Windows")
        set(WITH_XAUDIO2 FALSE)
        set(WITH_WINMM TRUE)
        set(WITH_WASAPI TRUE)
        set(WITH_OSS FALSE)
    endif()
endif()

if(${with-xaudio2})
    set(WITH_XAUDIO2 TRUE)
endif()

if(${with-openal})
    set(WITH_OPENAL TRUE)
endif()

if(${with-portaudio})
    set(WITH_PORTAUDIO TRUE)
endif()

if(${with-coreaudio})
    set(WITH_COREAUDIO TRUE)
endif()

if(${with-sdl})
    set(WITH_SDL TRUE)
endif()

if(${with-sdl2})
    set(WITH_SDL2 TRUE)
endif()

if(${with-wasapi})
    set(WITH_WASAPI TRUE)
endif()

if(${with-nosound})
    set(WITH_NOSOUND TRUE)
endif()

if(${with-sdl-only})
    set(WITH_SDL TRUE)
    set(WITH_SDL2 FALSE)
    set(WITH_SDL_STATIC FALSE)
    set(WITH_SDL2_STATIC FALSE)
    set(WITH_PORTAUDIO FALSE)
    set(WITH_OPENAL FALSE)
    set(WITH_XAUDIO2 FALSE)
    set(WITH_WINMM FALSE)
    set(WITH_WASAPI FALSE)
    set(WITH_OSS FALSE)
    set(WITH_NOSOUND FALSE)
    set(WITH_MINIAUDIO FALSE)
endif()

if(${with-sdl2-only})
    set(WITH_SDL FALSE)
    set(WITH_SDL2 TRUE)
    set(WITH_SDL_STATIC FALSE)
    set(WITH_SDL2_STATIC FALSE)
    set(WITH_PORTAUDIO FALSE)
    set(WITH_OPENAL FALSE)
    set(WITH_XAUDIO2 FALSE)
    set(WITH_WINMM FALSE)
    set(WITH_WASAPI FALSE)
    set(WITH_OSS FALSE)
    set(WITH_NOSOUND FALSE)
    set(WITH_MINIAUDIO FALSE)
endif()

if(${with-sdlstatic-only})
    set(WITH_SDL FALSE)
    set(WITH_SDL2 FALSE)
    set(WITH_SDL_STATIC TRUE)
    set(WITH_PORTAUDIO FALSE)
    set(WITH_OPENAL FALSE)
    set(WITH_XAUDIO2 FALSE)
    set(WITH_WINMM FALSE)
    set(WITH_WASAPI FALSE)
    set(WITH_OSS FALSE)
    set(WITH_NOSOUND FALSE)
    set(WITH_MINIAUDIO FALSE)
endif()

if(${with-sdl2static-only})
    set(WITH_SDL FALSE)
    set(WITH_SDL2 FALSE)
    set(WITH_SDL_STATIC FALSE)
    set(WITH_SDL2_STATIC TRUE)
    set(WITH_PORTAUDIO FALSE)
    set(WITH_OPENAL FALSE)
    set(WITH_XAUDIO2 FALSE)
    set(WITH_WINMM FALSE)
    set(WITH_WASAPI FALSE)
    set(WITH_OSS FALSE)
    set(WITH_NOSOUND FALSE)
    set(WITH_MINIAUDIO FALSE)
endif()

#TODO: Add vita homebrew options

if(${with-jack})
    set(WITH_JACK TRUE)
endif()

if(${with-jack-only})
    set(WITH_SDL FALSE)
    set(WITH_SDL2 FALSE)
    set(WITH_SDL_STATIC FALSE)
    set(WITH_SDL2_STATIC FALSE)
    set(WITH_PORTAUDIO FALSE)
    set(WITH_OPENAL FALSE)
    set(WITH_XAUDIO2 FALSE)
    set(WITH_WINMM FALSE)
    set(WITH_WASAPI FALSE)
    set(WITH_OSS FALSE)
    set(WITH_ALSA FALSE)
    set(WITH_VITA_HOMEBREW FALSE)
    set(WITH_COREAUDIO FALSE)
    set(WITH_JACK TRUE)
    set(WITH_NOSOUND FALSE)
    set(WITH_MINIAUDIO FALSE)
endif()

if(${with-miniaudio})
    set(WITH_MINIAUDIO TRUE)
endif()

if(${with-miniaudio-only})
    set(WITH_SDL FALSE)
    set(WITH_SDL2 FALSE)
    set(WITH_SDL_STATIC FALSE)
    set(WITH_SDL2_STATIC FALSE)
    set(WITH_PORTAUDIO FALSE)
    set(WITH_OPENAL FALSE)
    set(WITH_XAUDIO2 FALSE)
    set(WITH_WINMM FALSE)
    set(WITH_WASAPI FALSE)
    set(WITH_OSS FALSE)
    set(WITH_ALSA FALSE)
    set(WITH_VITA_HOMEBREW FALSE)
    set(WITH_COREAUDIO FALSE)
    set(WITH_JACK FALSE)
    set(WITH_NOSOUND FALSE)
    set(WITH_MINIAUDIO TRUE)
endif()

if(${with-native-only})
    set(WITH_SDL FALSE)
    set(WITH_SDL2 FALSE)
    set(WITH_SDL_STATIC FALSE)
    set(WITH_SDL2_STATIC FALSE)
    set(WITH_PORTAUDIO FALSE)
    set(WITH_OPENAL FALSE)
    set(WITH_XAUDIO2 FALSE)
    set(WITH_WINMM FALSE)
    set(WITH_WASAPI FALSE)
    set(WITH_OSS FALSE)
    set(WITH_ALSA FALSE)
    set(WITH_VITA_HOMEBREW FALSE)
    set(WITH_COREAUDIO FALSE)
    set(WITH_JACK FALSE)
    set(WITH_NOSOUND FALSE)
    set(WITH_MINIAUDIO TRUE)
    if(${PLATFORM} STREQUAL "Windows")
        set(WITH_WINMM TRUE)
    elseif(${PLATFORM} STREQUAL "MacOS")
        set(WITH_COREAUDIO TRUE)
    else()
        set(WITH_OSS)
    endif ()

endif()



if(${with-tools})
    set(WITH_TOOLS TRUE)
endif()

if (WITH_VITA_HOMEBREW EQUAL FALSE AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    add_compile_options( -msse4.1 -fPIC)
endif()




message("")
message("Active options:")
message("WITH_SDL           = " ${WITH_SDL})
message("WITH_SDL2          = " ${WITH_SDL2})
message("WITH_PORTAUDIO     = " ${WITH_PORTAUDIO})
message("WITH_OPENAL        = " ${WITH_OPENAL})
message("WITH_XAUDIO2       = " ${WITH_XAUDIO2})
message("WITH_WINMM         = " ${WITH_WINMM})
message("WITH_WASAPI        = " ${WITH_WASAPI})
message("WITH_ALSA          = " ${WITH_ALSA})
message("WITH_JACK          = " ${WITH_JACK})
message("WITH_OSS           = " ${WITH_OSS})
message("WITH_MINIAUDIO     = " ${WITH_MINIAUDIO})
message("WITH_NOSOUND       = " ${WITH_NOSOUND})
message("WITH_COREAUDIO     = " ${WITH_COREAUDIO})
message("WITH_VITA_HOMEBREW = " ${WITH_VITA_HOMEBREW})
message("WITH_TOOLS         = " ${WITH_TOOLS})
message("")


# This builds the static library
add_library(SoloudStatic STATIC)
file(GLOB_RECURSE AUDIOSOURCE soloud/src/audiosource/**.c*)
file(GLOB_RECURSE FILTER soloud/src/filter/**.c*)
file(GLOB_RECURSE CORE soloud/src/core/**.c*)

set(BACKEND_FILES "")

target_sources(SoloudStatic PRIVATE ${AUDIOSOURCE} ${FILTER} ${CORE})
target_include_directories(SoloudStatic PUBLIC soloud/src soloud/include)


if (WITH_OPENAL)



    find_package(OpenAL)
    if(DEFINED OPENAL_FOUND AND OPENAL_FOUND EQUAL TRUE)
        target_link_libraries(SoloudStatic ${OPENAL_LIBRARY})
        target_include_directories(SoloudStatic ${OPENAL_INCLUDE_DIR})
        target_compile_definitions(SoloudStatic PRIVATE WITH_OPENAL)
        file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/openal/**.c*)
        target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
    else ()
        message("OpenAL NOT found, refusing to link and force disabling backend")
        set(WITH_OPENAL FALSE)
    endif ()

endif ()

if (WITH_ALSA)
    target_compile_definitions(SoloudStatic PRIVATE WITH_ALSA)
    file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/alsa/**.c*)
    target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
    target_link_libraries(SoloudStatic asound)
endif ()

if (WITH_OSS)
    target_compile_definitions(SoloudStatic PRIVATE WITH_OSS)
    file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/oss/**.c*)
    target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
endif ()

if (WITH_MINIAUDIO)
    target_compile_definitions(SoloudStatic PRIVATE WITH_MINIAUDIO)
    file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/miniaudio/**.c*)
    target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
endif ()

if (WITH_NOSOUND)

    target_compile_definitions(SoloudStatic PRIVATE WITH_NOSOUND)
    file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/nosound/**.c*)
    target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
endif ()

if (WITH_COREAUDIO)
    target_compile_definitions(SoloudStatic PRIVATE WITH_COREAUDIO)
    file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/coreaudio/**.c*)
    target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
    target_link_libraries(SoloudStatic AudioToolbox.framework)
endif ()

if (WITH_PORTAUDIO)

    find_package(portaudio)
    if(DEFINED portaudio_FOUND AND portaudio_FOUND EQUAL TRUE)
        target_compile_definitions(SoloudStatic PRIVATE WITH_PORTAUDIO)
        file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/portaudio/**.c*)
        target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})

        target_include_directories(SoloudStatic ${portaudio_INCLUDE_DIRS})
        target_link_libraries(SoloudStatic ${portaudio_LIBRARIES})

    else ()
        message("PortAudio NOT found, refusing to link and force disabling backend")
        set(WITH_PORTAUDIO FALSE)
    endif ()
endif ()

if (WITH_SDL)
    target_compile_definitions(SoloudStatic PRIVATE WITH_SDL)
    file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/sdl/**.c*)
    target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
    target_include_directories(SoloudStatic PRIVATE ${sdl_include})
endif ()

if (WITH_SDL2 OR WITH_SDL2_STATIC)
    set( DIR "${CMAKE_CURRENT_SOURCE_DIR}/libraries/sdl2/cmake")

    if(EXISTS ${DIR} AND IS_DIRECTORY ${DIR})
        set(SDL2_DIR ${DIR})
    endif ()

    find_package(SDL2 REQUIRED)
    if(SDL2_FOUND)
        if(WITH_SDL2)

            target_compile_definitions(SoloudStatic PRIVATE WITH_SDL2)
            file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/sdl/**.c*)
            target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
            target_include_directories(SoloudStatic PRIVATE ${sdl2_include})
        elseif (WITH_SDL2_STATIC)
            target_compile_definitions(SoloudStatic PRIVATE WITH_SDL2_STATIC)
            file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/sdl2_static/**.c*)
            target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
            target_include_directories(SoloudStatic PRIVATE ${sdl2_include})
        endif ()

        target_include_directories(SoloudStatic PUBLIC ${SDL2_INCLUDE_DIRS})
        target_link_libraries(SoloudStatic PRIVATE ${SDL2_LIBRARIES})
    else ()
        message("SDL2 NOT found, refusing to link and force disabling backend")
        set(WITH_SDL2 FALSE)
        set(WITH_SDL2_STATIC FALSE)
    endif ()

endif ()

if (WITH_WASAPI)
    target_compile_definitions(SoloudStatic PRIVATE WITH_WASAPI)
    file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/wasapi/**.c*)
    target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
endif ()

if (WITH_XAUDIO2)
    target_compile_definitions(SoloudStatic PRIVATE WITH_XAUDIO2)
    file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/xaudio2/**.c*)
    target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
    target_include_directories(SoloudStatic PRIVATE ${dxsdk_include})
endif ()

if (WITH_WINMM)
    target_compile_definitions(SoloudStatic PRIVATE WITH_WINMM)
    file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/winmm/**.c*)
    target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
    target_link_libraries(SoloudStatic winmm)
endif ()

if (WITH_VITA_HOMEBREW)
    target_compile_definitions(SoloudStatic PRIVATE WITH_VITA_HOMEBREW usleep=sceKernelDelayThread)
    file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/vita_homebrew/**.c*)
    target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
endif ()

if (WITH_JACK)
    target_compile_definitions(SoloudStatic PRIVATE WITH_JACK)
    file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/jack/**.c*)
    target_link_libraries(jack)
    target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
endif ()

if (WITH_NULL)
    target_compile_definitions(SoloudStatic PRIVATE WITH_NULL)
    file(GLOB_RECURSE BACKEND_FILES soloud/src/backend/null/**.c*)
    target_sources(SoloudStatic PRIVATE ${BACKEND_FILES})
endif ()

if(NOT ${PLATFORM} STREQUAL "Windows")
    target_link_libraries(SoloudStatic pthread dl)
endif ()


# This builds the tools the Soloud optionally provides
if (WITH_TOOLS)
    add_executable(sanity)
    target_include_directories(sanity PUBLIC soloud/include)
    file(GLOB_RECURSE SOURCES soloud/src/tools/sanity/**.cpp)
    target_sources(sanity PRIVATE ${SOURCES})
    target_link_libraries(sanity SoloudStatic)

    add_executable(codegen)
    file(GLOB_RECURSE SOURCES soloud/src/tools/sanity/**.cpp)
    target_include_directories(codegen PRIVATE soloud/include)
    target_sources(codegen PRIVATE ${SOURCES})
    target_link_libraries(codegen SoloudStatic)

    add_executable(resamplerlab)
    file(GLOB_RECURSE SOURCES soloud/src/tools/resamplerlab/**.c*)
    target_sources(resamplerlab PRIVATE ${SOURCES})
    target_link_libraries(resamplerlab SoloudStatic)

    add_executable(lutgen)
    file(GLOB_RECURSE SOURCES soloud/src/tools/lutgen/**.c*)
    target_sources(lutgen PRIVATE ${SOURCES})
    target_link_libraries(lutgen SoloudStatic)
endif ()


# This builds the shared library
add_library(SoloudDynamic SHARED)
file(GLOB_RECURSE SOURCES soloud/src/c_api/**.c*)
target_sources(SoloudDynamic PRIVATE ${SOURCES})
target_include_directories(SoloudDynamic PRIVATE soloud/src** soloud/include)
target_link_libraries(SoloudDynamic PRIVATE SoloudStatic)

if(${PLATFORM} STREQUAL "Windows" AND MSVC)
    target_compile_options(SoloudDynamic PRIVATE "SHELL:/DEF:\"../../src/c_api/soloud.def\"")
endif ()

#Build examples

if(${build_examples})
    macro(sdl2_lib _name)
        set(SDL_ROOT ${sdl2_root})
        find_library(SDL REQUIRED)
        target_include_directories(_name ${SDL2_INCLUDE_DIRS})
        target_link_libraries(_name ${SDL2_LIBRARIES})
    endmacro()

    macro(CommonDemo _name)
        add_executable(_name)
        string( CONCAT SRC_PTH "soloud/demos/" ${_name} "/**.c*")
        file(GLOB_RECURSE SOURCES ${SRC_PTH})
        target_sources(_name PRIVATE SOURCES)
        target_include_directories(_name PRIVATE
                soloud/include
                soloud/demos/common
                soloud/demos/common/imgui
                soloud/demos/common/glew
                ${sdl2_include}
        )
        sdl2_lib(_name)
        target_compile_definitions(_name PRIVATE GLEW_STATIC)
        target_link_libraries( _name PRIVATE SoloudStatic SoloudDemoCommon SDL2main SDL2)

        find_package(OpenGL REQUIRED)
        target_link_libraries( _name PRIVATE ${OpenGL_LIBRARIES})
        target_include_directories(_name PRIVATE ${OpenGL_INCLUDE_DIRS})

        if(NOT ${PLATFORM} STREQUAL "Windows")
            target_link_libraries(_name pthread dl)
        endif ()



    endmacro()

    # Simple getting started demo
    add_executable(simplest)
    file(GLOB_RECURSE SOURCES "soloud/demos/simplest/**.c*")
    target_sources(simplest PRIVATE ${SOURCES})
    include_directories(soloud/include)
    if( NOT (${CMAKE_SYSTEM_NAME} STREQUAL "Windows" OR ${CMAKE_SYSTEM_NAME} STREQUAL "MSYS"))
        target_link_libraries(simplest pthread dl)
    endif ()
    target_link_libraries(simplest SoloudStatic)

    # Welcome demo
    add_executable(welcome)
    file(GLOB_RECURSE SOURCES "soloud/demos/welcome/**.c*")
    target_sources(welcome PRIVATE ${SOURCES})
    include_directories(soloud/include)
    if( NOT (${CMAKE_SYSTEM_NAME} STREQUAL "Windows" OR ${CMAKE_SYSTEM_NAME} STREQUAL "MSYS"))
        target_link_libraries(welcome pthread dl)
    endif ()
    target_link_libraries(welcome SoloudStatic)

    # Null demo
    add_executable(null)
    file(GLOB_RECURSE SOURCES "soloud/demos/null/**.c*")
    target_sources(null PRIVATE ${SOURCES})
    include_directories(soloud/include)
    if( NOT (${CMAKE_SYSTEM_NAME} STREQUAL "Windows" OR ${CMAKE_SYSTEM_NAME} STREQUAL "MSYS"))
        target_link_libraries(null pthread dl)
    endif ()
    target_link_libraries(null SoloudStatic)

    # Enumerate demo
    add_executable(enumerate)
    file(GLOB_RECURSE SOURCES "soloud/demos/enumerate/**.c*")
    target_sources(enumerate PRIVATE ${SOURCES})
    include_directories(soloud/include)
    if( NOT (${CMAKE_SYSTEM_NAME} STREQUAL "Windows" OR ${CMAKE_SYSTEM_NAME} STREQUAL "MSYS"))
        target_link_libraries(enumerate pthread dl)
    endif ()
    target_link_libraries(enumerate SoloudStatic)

    # The rest of the demos require SDL2
    if(WITH_SDL2 OR WITH_SDL2STATIC)
    elseif ()
    endif ()

endif ()
